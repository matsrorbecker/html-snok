// Generated by CoffeeScript 1.10.0
(function() {
  var HtmlSnok, cheerio, request,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  request = require('request');

  cheerio = require('cheerio');

  module.exports = HtmlSnok = (function() {
    function HtmlSnok(pages, callback, options) {
      this.pages = pages;
      this.callback = callback;
      this.sniff = bind(this.sniff, this);
      this.selector = (options != null ? options.selector : void 0) || 'body';
      this.log = (options != null ? options.log : void 0) || false;
      this.savedPages = {};
    }

    HtmlSnok.prototype.sniff = function() {
      var i, len, page, ref, results;
      ref = this.pages;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        page = ref[i];
        results.push(this._fetchPage(page));
      }
      return results;
    };

    HtmlSnok.prototype._fetchPage = function(page) {
      var options;
      options = {
        url: page,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36',
          'Accept': 'text/html,application/xhtml+xml'
        }
      };
      return request(options, (function(_this) {
        return function(error, response, html) {
          if (!error && response.statusCode === 200) {
            return _this._examine(page, html);
          } else if (error) {
            if (_this.log) {
              return console.error(error);
            }
          } else {
            if (_this.log) {
              return console.error("Server responded with " + response.statusCode + "...");
            }
          }
        };
      })(this));
    };

    HtmlSnok.prototype._examine = function(page, html) {
      var $, content;
      $ = cheerio.load(html);
      content = $(this.selector).text();
      if (!this.savedPages[page]) {
        this.savedPages[page] = content;
        return;
      }
      if (content !== this.savedPages[page]) {
        this.savedPages[page] = content;
        return this.callback(page, html, $);
      }
    };

    return HtmlSnok;

  })();

}).call(this);
